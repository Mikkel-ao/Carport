@startuml
package app {
    class Main {
        - final ConnectionPool connectionPool = ConnectionPool.getInstance()
        + void main(String[] args)
    }
}

package controllers {
    class OrderController {
        - void addRoutes(Javalin app, ConnectionPool connectionPool)
        - void getCarportDimensions(Context ctx)
        - void handleCustomerRequest(Context ctx)
        - OrderItemAndPrice getPoleOrderItemAndPrice(int carportLength)
        - OrderItemAndPrice getRafterOrderItemAndPrice(int carportLength, int carportWidth)
        - List<OrderItemAndPrice> getBeamOrderItemAndPrice(int carportLength)
        + Order createListOfMaterials(Context ctx)
        + void saveOrder(Order order)
        + void getOrderDetailsForUser(Context ctx)
        + void showAllOrdersForAdmin(Context ctx)
        + void showListOfMaterials(Context ctx)
        + void updatePrice(Context ctx)
        + void sendOffer(Context ctx)
        + void payOrder(Context ctx)
    }

    class UserController {
        + addRoutes(Javalin app, ConnectionPool connectionPool)
        - void logout(Context ctx)
        - void login(Context ctx)
        - void createUser(Context ctx)
    }

    class SvgController {
        + void addRoutes(Javalin app)
        + void showSvg(Context ctx)
    }
}

package service {
    class Svg {
        + Svg()
        + addRectangle()
        + addArrows()
        + addLine()
        + addText()
    }


    class Calculator {
            + int calcAmountOfPoles(int totalLength, double poleWidth)
            + double calcPoleSpacing(int totalLength, double poleWidth)
            + int calcAmountOfRafters(int totalLengthInCm, double rafterWidth)
            + double calcRafterSpacing(int carportLength, double rafterWidth)
        }
}

package persistence {
    class OrderMapper {
        + List<Order> getAllOrders(ConnectionPool connectionPool)
        + Order getOrderByOrderId(int orderId)
        + void insertOrderItem(int orderId, OrderItem orderItem)
        + void updateOrderStatus(int orderId, OrderStatus newStatus)
        + void UpdatePrice(double newPrice, int orderId)
        + List<Integer> getProductLengths(int productId)
        + List<Integer> getCarportLength()
        + List<Integer> getCarportWidth()
        + int createOrder(int width, int length, int userId, double customerPrice, double costPrice)
        + List<OrderInfoDTO> getOrdersForUser(int userId)
        + ProductVariant getVariantsByProductAndLength(int productLength, int productId)
    }

    class UserMapper {
        + User login(String email, String password)
        + void createUser(String email, String password, String phoneNumber, String zipCode, String homeAdress, String fullName)
        + User getUserById(int userId)
    }

    class ConnectionPool {
        - HikariDataSource ds
        - Logger LOGGER
        + ConnectionPool getInstance()
        + Connection getConnection()
        + close()
    }
}

package entities {
    class User {
        - int userId
        - String email
        - String phoneNumber
        - String role
        - String fullName
        - String address
        - String zipCode
        + User(int userId, String email, String phoneNumber, String role, String zipCode, String address, String fullName)
    }

    class Order {
        - List<OrderItem> listOfMaterials
        - int orderId
        - int carportWidth
        - int carportLength
        - OrderStatus status
        - User user
        - double totalSalesPrice
        - double costPrice
        - Timestamp timeStamp
        + Order(int orderId, int carportWidth, int carportLength, OrderStatus status, User user, double totalPrice, double costPrice, Timestamp timeStamp)
    }
}

package DTO {
    class OrderInfoDTO {
        - int orderId
        - int carportWidth
        - int carportLength
        - OrderStatus status
        - double totalSalesPrice
        - double costPrice
        - Timestamp timestamp
        + OrderInfoDTO(int orderID, int carportWidth, int carportLength, OrderStatus status, double totalSalesPrice, double costPrice, Timestamp timestamp)
    }

    class OrderItemAndPrice {
        - OrderItem orderItem
        - double price
        + OrderItemAndPrice(OrderItem orderItem, double price)
    }
}

package util {
    class Calculator {
        + int calcAmountOfPoles(int totalLength, double poleWidth)
        + double calcPoleSpacing(int totalLength, double poleWidth)
        + int calcAmountOfRafters(int totalLengthInCm, double rafterWidth)
        + double calcRafterSpacing(int carportLength, double rafterWidth)
    }

    enum OrderStatus {
        PENDING,
        CONFIRMED,
        CANCELLED,
        REJECTED,
        PAID,
        ACCEPTED;
    }
}

persistence <-- DatabaseException
Main <-- config
Main <-- controllers
controllers <-- persistence
persistence <-- entities
controllers <-- service
controllers <-- entities
persistence <-- DTO
controllers <-- DTO
controllers <-- util
persistence <-- util
controllers <-- service

@enduml
